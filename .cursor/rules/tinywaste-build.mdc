---
description: TinyWaste 游戏项目构建工作流和开发规范
globs: ["**/*.js", "**/*.html", "**/*.md"]
alwaysApply: true
---

# TinyWaste 游戏项目开发规范

## 项目概述

TinyWaste 是一个基于 JavaScript 的网页游戏，集成了金手指作弊工具系统。项目采用 jQuery + Bootstrap 技术栈，支持 GitHub Pages 部署。

## 🚀 构建工作流（重要）

### 核心原则：节省Token成本
- **AI助手只处理源代码**，不再手动压缩JavaScript文件
- **自动化构建流程**处理所有压缩工作
- **专注功能开发**，避免重复的压缩任务

### 文件处理规则

#### ✅ AI助手应该编辑的文件：
- `data/cheat.js` - 金手指源代码（核心开发文件）
- `data/lib.js` - 游戏核心库文件
- `data/loader.js` - 游戏加载器
- `index.html` - 主页面
- `*.md` - 文档文件

#### ❌ AI助手不应该直接编辑的文件：
- `data/cheat.min.js` - 自动生成的压缩文件
- `data/*.min.js` - 所有压缩文件

### 构建命令

#### 方法1：批处理脚本（推荐，无需依赖）
```bash
# 构建压缩文件
.\build.bat

# 清理构建文件  
.\build.bat clean

# 查看帮助
.\build.bat help
```

#### 方法2：Node.js构建（完整功能）
```bash
# 安装依赖
npm install

# 一次性构建
npm run build

# 开发模式（文件监听）
npm run dev

# 运行测试
npm test

# 清理构建文件
npm run clean
```

### 开发工作流

1. **编辑源码**：修改 `data/cheat.js` 或其他源文件
2. **运行构建**：执行 `.\build.bat` 或 `npm run build`
3. **自动生成**：系统自动生成对应的 `.min.js` 文件
4. **测试验证**：在浏览器中测试功能
5. **提交代码**：只提交源文件，不提交 `.min.js` 文件

### AI助手行为准则

#### 当用户需要修改JavaScript功能时：
1. **只编辑源文件**（如 `data/cheat.js`）
2. **完成编辑后提醒用户运行构建命令**
3. **不要尝试手动创建或修改 `.min.js` 文件**
4. **不要在响应中输出压缩后的代码**

#### 示例响应模式：
```
我已经修改了 data/cheat.js 文件，添加了新功能。

请运行以下命令来生成压缩版本：
.\build.bat

然后测试功能是否正常工作。
```

## 🎮 金手指系统架构

### 核心文件结构
```
data/
├── cheat.js          # 金手指源代码（AI编辑此文件）
├── cheat.min.js      # 自动生成的压缩版本
├── lib.js            # 游戏核心库
├── loader.js         # 加载器（包含金手指加载逻辑）
└── ...其他游戏文件
```

### 金手指功能模块

#### 1. 属性修改系统
- 基础属性：life, hunger, thirst, energy, san, radiation
- 特殊属性：constitution, perception, charm, luck, agility, attack, defence, critical, critimes, dodge, hitrate, escape, tech
- 属性锁定机制：防止属性随时间变化

#### 2. 物品操作系统  
- 白嫖模式：制作物品不消耗材料
- 背包扩容：将容量设置为999
- 物品添加/修改功能

#### 3. 状态操作系统
- 移除所有Buff/Debuff
- 状态锁定功能

#### 4. UI系统
- 右上角emoji按钮（🎮）
- 可折叠的金手指面板
- 分类的功能区域
- 快捷键支持（Alt+X）

#### 5. 控制台命令系统
- `cheat.help()` - 显示帮助
- `cheat.set(attr, value)` - 设置属性
- `cheat.max(attr)` - 最大化属性  
- `cheat.lock(attr)` - 锁定属性
- `cheat.whiteMode()` - 切换白嫖模式
- 等等...

### 关键技术实现

#### 函数钩子系统
- `installStatusHook()` - 拦截属性变化函数
- `installCraftingHook()` - 拦截材料消耗函数
- 通过重写 `window.caculate` 和 `window.costMaterialFunc` 实现

#### DOM持久化策略
- UI元素直接附加到 `body`
- 高 `z-index` 确保显示优先级
- `MutationObserver` 监听DOM变化
- 自动重新初始化机制

#### 数据持久化
- 使用 `localStorage` 替代PHP后端
- 兼容GitHub Pages静态托管
- 自动保存/加载游戏状态

## 🛠️ 开发最佳实践

### 代码规范
- 使用 `CHEAT_LOG_PREFIX` 统一日志前缀
- 所有金手指相关变量使用大写命名
- 函数命名采用驼峰式，清晰表达功能
- 添加详细的错误处理和日志记录

### 兼容性考虑
- 确保与原游戏系统兼容
- 不破坏游戏原有功能
- 支持动态加载和卸载
- 处理游戏状态变化（如重新开始游戏）

### 性能优化
- 避免频繁的DOM操作
- 使用事件委托处理动态元素
- 合理使用定时器和监听器
- 及时清理不需要的资源

## 📝 文档维护

### 必须更新的文档
- `README_GitHub_Pages.md` - 部署和使用说明
- `BUILD_GUIDE.md` - 详细构建指南
- `QUICK_BUILD_GUIDE.md` - 快速上手指南

### 文档更新时机
- 添加新功能时
- 修改构建流程时  
- 发现重要bug修复时
- 用户反馈问题时

## 🚨 重要提醒

### 对AI助手的要求
1. **永远不要手动编辑 `.min.js` 文件**
2. **修改源码后必须提醒用户运行构建命令**
3. **不要在响应中输出大段压缩代码**
4. **专注于功能实现，让构建系统处理压缩**
5. **遇到构建问题时，检查源码语法而不是修复压缩文件**

### 故障排除指南
- 构建失败 → 检查源码语法错误
- 功能不工作 → 确认是否运行了构建命令
- 面板不显示 → 检查z-index和DOM附加逻辑
- 属性锁定失效 → 验证钩子函数是否正确安装

## 🎯 项目目标

- 提供完整的游戏金手指功能
- 保持代码质量和可维护性
- 确保GitHub Pages兼容性
- 优化开发者体验和用户体验
- 最小化AI开发成本（Token消耗）

通过遵循这些规范，可以确保项目的持续发展和高效的开发体验。